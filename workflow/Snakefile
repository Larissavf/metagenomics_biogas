import os
configfile: 'config/config.yaml'

d = {}
with open('config/temp_input.txt','w') as file:
   for sample_name in config['fastq_all']:
       basename = os.path.splitext(sample_name)
       basename = os.path.basename(basename[0])
       d[basename] = sample_name
       file.write(sample_name + '\t')

OD = config['output_dir']
samples = list((d.keys()))
kraken_db = config['kraken_db']



rule all:
   input:
        # expand(OD + 'taxonomy/{sample}_output.txt', sample=samples),
    #    OD +'visualisation/bracken.pdf',
         expand(OD +'qc/nanoqc/{sample}.html', sample=samples),
    #    expand(OD + 'human3/{sample}', sample=samples)


rule nanoqc:
   input:
       lambda wildcards: d[wildcards.sample]
   output:
       OD+'qc/nanoqc/{sample}.html'
   shell:
       'nanoQC -o {output} {input}'

rule nanofilt:
   input:
       lambda wildcards: d[wildcards.sample]
   output:
       OD + 'qc/nanofilt/{sample}.fastq'
   shell:
       'NanoFilt --headcrop 40 --tailcrop 20 --quality 15 {input} > {output}' 

rule kraken2:
   input:
       OD + 'qc/nanofilt/{sample}.fastq'
   output:
       OD + 'taxonomy/{sample}_output.txt'
   log:
       OD + 'log/{sample}_report.log'
   shell:
       'kraken2 --db /data/datasets/KRAKEN2_INDEX/k2_standard_20231009/ --report {log} --output {output} {input}'



#human3 is a package in biobakery
# rule human3:
#    input:
#        OD + 'qc/nanofilt/{sample}.fastq'
#    output:
#        directory(OD + 'human3/{sample}')
#    shell:
#     #    "humann_databases --download chocophlan reduced ../ | "
#        "humann --input {input} --output {output} --nucleotide-database ~/miniconda3/envs/Metagenomics/lib/python3.12/site-packages/metaphlan/chocophlan"

# rule bracken:
#     input:
#         kraken = OD + 'log/{sample}_report.log',
#         KRAKEN_DB = '/data/datasets/KRAKEN2_INDEX/k2_standard_20231009/'
#     output:
#         OD + ' bracken/{sample}_bracken_out.tsv'
#     shell:
#         'bracken-build -d {input.KRAKEN_DB} -t 10 | '
#         'bracken -d {input.KRAKEN_DB} -i {input.kraken} -o {output}'

# rule bracken_plot:
#     input:
#         expand(OD + ' bracken/{sample}_bracken_out.tsv', sample=list(d.keys()))
#     output:
#         OD + 'visualisation/bracken.pdf'
#     shell:
#         'python ../Kraken-Bracken-plot-main/Kraken-Bracken-plot.py -o ../output.txt -i config/temp_input.txt'

